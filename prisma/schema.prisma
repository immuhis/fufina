generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String?
  role         Role     @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  addresses    Address[]
  orders       Order[]
  reviews      Review[]
  wishlist     Wishlist?
  sessions     Session[]
  accounts     Account[]
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Address {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  type      String
  line1     String
  line2     String?
  city      String
  state     String?
  zip       String
  country   String
  isDefault Boolean  @default(false)
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
}

model Product {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  description   String
  brand         String?
  status        ProductStatus  @default(DRAFT)
  collection    Collection?    @relation(fields: [collectionId], references: [id])
  collectionId  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  images        ProductImage[]
  variants      Variant[]
  reviews       Review[]
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model ProductImage {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  url       String
  alt       String?
  sort      Int     @default(0)
}

model Variant {
  id              String   @id @default(cuid())
  product         Product  @relation(fields: [productId], references: [id])
  productId       String
  sku             String?  @unique
  color           String?
  size            String?
  price           Int
  compareAtPrice  Int?
  stock           Int      @default(0)
  weight          Float?
}

model Cart {
  id        String     @id @default(cuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  sessionId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String
  qty       Int     @default(1)
}

model Order {
  id                    String        @id @default(cuid())
  number                String        @unique
  user                  User?         @relation(fields: [userId], references: [id])
  userId                String?
  status                OrderStatus   @default(PENDING)
  subtotal              Int
  tax                   Int
  shipping              Int
  discount              Int           @default(0)
  total                 Int
  paymentStatus         PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  items                 OrderItem[]
  timeline              OrderTimeline[]
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  REFUNDED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  REFUNDED
  FAILED
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String
  title     String
  price     Int
  qty       Int
}

model OrderTimeline {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  status    String
  message   String?
  createdAt DateTime @default(now())
}

model Coupon {
  id         String   @id @default(cuid())
  code       String   @unique
  type       CouponType
  value      Int
  startsAt   DateTime?
  endsAt     DateTime?
  usageLimit Int?
  used       Int      @default(0)
}

enum CouponType {
  PERCENT
  FIXED
}

model Review {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  rating     Int
  comment    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Wishlist {
  id     String         @id @default(cuid())
  user   User           @relation(fields: [userId], references: [id])
  userId String         @unique
  items  WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  wishlist  Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  expires      DateTime
}

model Account {
  id                 String  @id @default(cuid())
  user               User    @relation(fields: [userId], references: [id])
  userId             String
  provider           String
  providerAccountId  String
  type               String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  @@unique([provider, providerAccountId])
}
